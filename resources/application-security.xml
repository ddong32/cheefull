<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-2.0.4.xsd" default-lazy-init="true">
    
	<!--
	    servlet-api-provision 禁止保存登录之前的请求 
	    access-denied-page 访问未授权时的显示页面 
	    auto-config = true 则使用from-login. 如果不使用该属性 则默认为http-basic(没有session). 自动配置常用的权限控制机制 
		lowercase-comparisons：表示URL比较前先转为小写。
		path-type：表示使用Apache Ant的匹配模式。
		access-decision-manager-ref：指定了自定义的访问策略管理器。当系统角色名的前缀不是默认的ROLE_时，需要自定义访问策略管理器。
	-->
	<sec:http auto-config="true" access-decision-manager-ref="accessDecisionManager" servlet-api-provision="false" access-denied-page="/common/access_denied.action">
		
		<sec:intercept-url pattern="/admin/user!login.action" filters="none" />	
		<sec:intercept-url pattern="/admin/user!checkSession.action" filters="none" />
				
		<!--login-page 指定登录页面。
			login-processing-url：指定了客户在登录页面中按下 Sign In 按钮时要访问的 URL。与登录页面form的action一致。其默认值为：/j_spring_security_check
			default-target-url 登录成功后跳转的URL。
			always-use-default-target 是否登录后必须访问default-target-url,
			authentication-failure-url 登录失败后跳转的URL -->
		<sec:form-login login-page="/admin/user!login.action" login-processing-url="/admin/loginVerify" default-target-url="/admin/main!frame.action"
			authentication-failure-url="/admin/user!login.action" always-use-default-target="true"  />
		
		<!-- invalidate-session=true退出后销毁session,logout-success-url退出成功后转向的url,logout-url退出 -->
		<sec:logout invalidate-session="true" logout-success-url="/admin/user!login.action" logout-url="/admin/logout" />
	</sec:http>
	
	<!-- 加密  -->
	<sec:authentication-provider user-service-ref="userDetailsServiceImpl">
		<sec:password-encoder hash="md5" />
	</sec:authentication-provider>
	
	<sec:authentication-manager alias="authenticationManager" />
	
	<!-- 资源权限管理 -->
	<bean id="filterSecurityInterceptor" class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
		<!-- 拦截器 -->
		<sec:custom-filter before="FILTER_SECURITY_INTERCEPTOR" />
		<!-- 用户拥有的权限加载 -->
		<property name="authenticationManager" ref="authenticationManager" />
		<!-- 验证请求资源同角色关系 -->
		<property name="accessDecisionManager" ref="accessDecisionManager" />
		<!-- 资源对应权限加载 -->
		<property name="objectDefinitionSource" ref="userSecurityDefinitionSource" />
	</bean>
	
	<!-- 切点 -->
	<bean id="accessDecisionManager" class="org.springframework.security.vote.AffirmativeBased">
		<property name="decisionVoters">
			<list>
				<bean class="org.springframework.security.vote.RoleVoter" />
				<bean class="org.springframework.security.vote.AuthenticatedVoter" />
				<bean class="com.chee.common.PersonalVoter">
					<property name="authenticationManager" ref="authenticationManager" />
				</bean> 
			</list>
		</property>
	</bean>
</beans>