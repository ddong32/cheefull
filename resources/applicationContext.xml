<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:amq="http://activemq.apache.org/schema/core" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:cxf="http://cxf.apache.org/core" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
			 http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			 http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd 
     	     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
			 http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
			 http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
			 http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
			 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
			 
	<!-- 报错信息拦截器 -->
	<bean id="ExceptionInterceptor" class="com.chee.action.exception.ExceptionInterceptor"></bean>
	
	<!-- 从配置文件获取相关的配置信息 -->
	<bean id="projectPropertyConfigurer" class="com.chee.common.DhPlaceholderConfigurerSupport">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>

    <!--ORACLE C3P0数据库连接池配置-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--ORACLE数据库连接-->
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--最小连接数-->
        <property name="minPoolSize" value="5"/>
        <!--最大连接数-->
        <property name="maxPoolSize" value="100"/>
        <!--最大空闲时间，1800秒内未使用则连接被丢弃。0为永不丢弃-->
        <property name="maxIdleTime" value="7200"/>
        <!--当连接池中的连接耗尽的时候，C3P0一次同时获取的连接数-->
        <property name="acquireIncrement" value="3"/>
        <!--JDBC的标准参数，用以控制数据源内家在的preparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。-->
        <property name="maxStatements" value="0"/>
        <!--初始化时获取10个连接，取值应在minPoolSize与maxPoolSize之间。-->
        <property name="initialPoolSize" value="10"/>
        <!--每30分钟检查所有连接池中的空闲连接-->
        <property name="idleConnectionTestPeriod" value="7200"/>
        <!--定义在从数据库获取新连接失败后重复尝试的次数-->
        <property name="acquireRetryAttempts" value="30"/>
        <!--两次连接中间隔时间，单位毫秒。Default: 1000 --> 
        <property name="acquireRetryDelay" value="100"></property> 
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍然有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设置为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。-->
        <property name="breakAfterAcquireFailure" value="false"/>
        <!--因性能消耗大请只在需要时候使用它，如果设为true那么在每个connection提交的时候都将检验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接池测试的性能。-->
        <property name="testConnectionOnCheckout" value="false"/>
    </bean>
	
    <bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor" lazy-init="true"/>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<value>
				<!-- 设置数据库方言 -->
				hibernate.dialect=${hibernate.dialect}
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				hibernate.hbm2ddl.auto=${hibernate.hbm2ddl.auto}
				<!-- 输出SQL语句到控制台 -->
				hibernate.show_sql=${hibernate.show_sql}
				<!-- 格式化输出到控制台的SQL语句 -->
				hibernate.format_sql=${hibernate.format_sql}
				<!-- #是否显示注释，用以指出什么操作产生的 SQL 语句  -->
				hibernate.use_sql_comments=${hibernate.use_sql_comments}
				<!-- 是否开启查询缓存 -->
				hibernate.cache.use_query_cache=${hibernate.cache.use_query_cache}
				<!-- 是否开启二级缓存 -->
				hibernate.cache.use_second_level_cache=${hibernate.cache.use_second_level_cache}
				<!-- 配置二级缓存产品 -->
				hibernate.cache.provider_class=${hibernate.cache.provider_class}
				<!-- 数据库批量查询数 -->
				hibernate.jdbc.fetch_size=${hibernate.jdbc.fetch_size}
				<!-- 数据库批量更新数 -->
				hibernate.jdbc.batch_size=${hibernate.jdbc.batch_size}
			</value>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>com.chee.entity.Account</value>
				<value>com.chee.entity.AccountFlow</value>
				<value>com.chee.entity.Affiche</value>
				<value>com.chee.entity.Bank</value>
				<value>com.chee.entity.BankRunning</value>
				<value>com.chee.entity.Business</value>
				<value>com.chee.entity.BusinessCustomer</value>
				<value>com.chee.entity.Cooperator</value>
				<value>com.chee.entity.Customer</value>
				<value>com.chee.entity.Department</value>
				<value>com.chee.entity.Expence</value>
				<value>com.chee.entity.ExpenceFlow</value>
				<value>com.chee.entity.Resource</value>
				<value>com.chee.entity.Role</value>
				<value>com.chee.entity.SysCode</value>
				<value>com.chee.entity.Syslog</value>
				<value>com.chee.entity.User</value>
				<value>com.chee.entity.Travel</value>
				<value>com.chee.entity.Province</value>
				<value>com.chee.entity.City</value>
				<value>com.chee.entity.District</value>
				<!-- 
				<value>com.chee.entity.WxContent</value>
				<value>com.chee.entity.WxCode</value>
				<value>com.chee.entity.WxOption</value>
				<value>com.chee.entity.Attachment</value>
				-->
			</list>
		</property>
	</bean>

	<!-- 开启注解 -->
	<context:annotation-config />
	
	<!-- 设置需要进行Spring注解扫描的类包 -->
	<context:component-scan base-package="com.chee" />

	<!-- 使用AspectJ方式配置AOP -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!-- 使用注解方式定义事务 -->
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" />

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务传播特性 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="write*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- AOP -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.chee.service..*.*(..))" advice-ref="transactionAdvice" />
	</aop:config>
</beans>